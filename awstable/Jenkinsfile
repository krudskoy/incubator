env.DOCKERHUB_USERNAME = 'rudskoy'

pipeline {
  environment {
    registry = 'rudskoy/awstable'
    registryCredential = 'dockerhub'
    dockerImage = ''
  }
  
  agent any
  stages {
    stage('Cloning Git') {
      steps {
        git 'https://github.com/krudskoy/awstable'
      }
    }
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    stage('Deploy Image') {
      steps{
        script {
          docker.withRegistry( '', registryCredential ) {
          dockerImage.push()
        }
      }
    }
  }
 }
}
node ("Swarm Master"){
  stage("Production") {
    try {
      sh '''
        SERVICES=$(docker service ls --filter name=awstable --quiet | wc -l)
        if [[ "$SERVICES" -eq 0 ]]; then
          docker network rm mynetwork || true
          docker network create --driver overlay --attachable mynetwork
          docker service create --network mynetwork -p 5000:5000 --name awstable ${DOCKERHUB_USERNAME}/awstable:${BUILD_NUMBER}
        else
          docker service update --image ${DOCKERHUB_USERNAME}/awstable:${BUILD_NUMBER} awstable
        fi
        '''
     }
     catch(e) {
       error "Service update failed in production"
     }
     finally {
       sh "docker ps -aq | xargs docker rm || true"
     }
  }
}
